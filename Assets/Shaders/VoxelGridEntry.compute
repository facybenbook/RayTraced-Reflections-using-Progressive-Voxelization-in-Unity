// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Structure representing an individual voxel element
struct Voxel
{
	float4 data;
};

// Readable/Writable structured buffer for storing the voxel grid
RWStructuredBuffer<Voxel>	voxelVolumeBuffer;

// Texture for storing the color with direct lighting
Texture2D<float4>			_LightingTexture;

// Texture for storing the world position
Texture2D<float4>			_PositionTexture;

// Variable representing the dimension of the voxel grid
uint						_VoxelVolumeDimension;

[numthreads(1, 1, 1)]
// Entry point of the voxelization compute shader
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// Color of the current voxel with lighting
	float3 lightingColor = _LightingTexture[id.xy].rgb;

	// This world position is between 0...1
	float3 worldPosition = _PositionTexture[id.xy].rgb;

	// Compute the position in the voxel grid
	float3 voxelPosition = worldPosition * _VoxelVolumeDimension;
	uint3 temp = (int3)(voxelPosition);
	// Compute the index in the voxel buffer according to the computed position of the voxel
	uint index = (temp.x * _VoxelVolumeDimension * _VoxelVolumeDimension) + (temp.y * _VoxelVolumeDimension) + (temp.z);
	
	// Store the packed data into the voxel grid buffer
	voxelVolumeBuffer[index].data.xyz = lightingColor;
	voxelVolumeBuffer[index].data.w = 1.0f;
}